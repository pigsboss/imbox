function varargout = blobex(varargin)
%BLOBEX blob extraction
%
%Syntax:
%   blobex
%   blobex(I)
%   blobex(I,scale)
%   blobex(I,scale, threshold)
%   [Blst, Bimg, Rm] = blobex(...)
%
%Input arguments:
%   I     (optional) is input 2D image. If absence, current image CData
%   while be taken as input.
%   scale (optional) is scale of blob to detect.
%
%Returns:
%   Btab  is blob information table. From the 1st to the 7st row the table shows
%   flux, x_center, y_center, x_radius, y_radius, phi_major_axis, fit_error
%   respectively.
%   Bimg  is image of blob profiles.
%   Rm    is the background (residual map).
%
[I, ~, ~, scale, threshold] = parse_inputs(varargin{:});
ell = ellipse(I, scale, threshold);
sizeI = size(I);
[X,Y] = meshgrid(1:sizeI(2),1:sizeI(1));
Resolved = isresolved(X,Y,ell);
idx = find(Resolved);
NumRes = length(idx);
Rm = I;
% Rm = gsmooth(I,scale);
Btab = zeros(7, NumRes);
% rows of Btab:
% 1: flux
% 2: xc
% 3: yc
% 4: rx
% 5: ry
% 6: phi_major
% 7: fit_error

rmax = ceil(max(ell(3,idx)));
Bimg = zeros(2*rmax+1,2*rmax+1,NumRes);
disp([int2str(NumRes),' blobs detected, start extraction.'])
% tabfile = ['blobtab-',datetimefilename,'.tex'];
% fid = fopen(tabfile,'w');
hbar = waitbar(0,'Extracting blobs...');
tBE = tic;
for k = 1:NumRes
    [B,Rm] = ellisep(X,Y,Rm,ell(:,idx(k)));
    Btab(1,k) = sum(B(:));
    Btab(2:7,k) = ell(:,idx(k));
    xc = round(ell(1,idx(k)));
    yc = round(ell(2,idx(k)));
    xmin = max(xc-rmax,1);
    xmax = min(xc+rmax,sizeI(2));
    ymin = max(yc-rmax,1);
    ymax = min(yc+rmax,sizeI(1));
    Bimg((rmax-yc+ymin+1):(rmax-yc+ymax+1),...
        (rmax-xc+xmin+1):(rmax-xc+xmax+1),k) = B(ymin:ymax,xmin:xmax);
    Bimg(:,:,k) = Bimg(:,:,k)/max(max(Bimg(:,:,k)));
    tElapsed = toc(tBE);
    tRemain = ((NumRes-k)/k)*tElapsed;
    if mod(k,2)==0
      waitbar(k/NumRes,hbar,['Extracting blobs, ',int2str(round(tRemain)),' seconds left...']);
    end
end

if exist('hbar','var')==1,  close(hbar);end

% if (fclose(fid)) == 0
%   disp('Blobs extracted and write to table: ',tabfile);
% else
%   error('I/O error when close tabfile.');
% end

nargoutchk(0,3)
if nargout > 0
    varargout{1} = Btab;
    varargout{2} = Bimg;
    varargout{3} = Rm;
else
    Bimg([1, 2*rmax+1], :, :)=1;
    Bimg(:, [1, 2*rmax+1], :)=1;
    figure('Name','Blob profiles')
    montage(reshape(Bimg,2*rmax+1,2*rmax+1,1,[])*255,hot(256))
    title('Blob profiles')
    figure('Name','Blob flux distribution')
    hist(Btab(1,:),20);xlabel('flux');ylabel('frequency')
    title('Blob flux distribution')
    figure('Name','Resolved blobs')
    imagesc(I);axis image;colormap('hot');xlabel('x pixel');ylabel('y pixel')
    ellidraw(ell(:,Resolved),'Color','g');title('Resolved blobs')
    cbax = colorbar;
    set(get(cbax,'YLabel'),'string','intensity')
%     'fontname','Helvetica',...
%     'fontsize',16)
end
return

function [B, R] = ellisep(X, Y, I, ell)
%ELLISEP elliptical separation
%
%Input arguments:
%   X and Y are coordinates variable matrices of I.
%   X and Y are generated by:
%   [X,Y] = meshgrid(1:NX, 1:NY), where NX and NY are number of points
%   along x-axis and y-axis of I respectively.
%
%   ell is the set of geometric parameters of an ellipse.
%   ell(1) and ell(2) are center coordinates.
%   ell(3) and ell(4) are major and minor radii.
%   ell(5) is phase angle of the major axis.
%   ell(1:4) are coordinate variables corresponds to X and Y.
sizeI = size(I);
xc = ell(1);
yc = ell(2);
xr = ell(3);
yr = ell(4);
NB = 4*ceil(2 + max(xr,yr)); % number of vertices
[xb, yb] = ellidraw(ell,NB);
xb = max(min(xb,sizeI(2)),1);
yb = max(min(yb,sizeI(1)),1);
Ib = interp2(X, Y, I, xb, yb, 'linear', 0);
NR = ceil(NB/4); % number of interpolated points on each radius
Ic = mean(Ib);
IR = (Ib-Ic)*((0:(NR-1))/(NR-1)) + Ic;
xR = (xb-xc)*((0:(NR-1))/(NR-1)) + xc;
yR = (yb-yc)*((0:(NR-1))/(NR-1)) + yc;
R = I;
idx = find((X(:) <= ceil(max(xR(:,NR)))) & X(:) >= floor(min(xR(:,NR))) &...
    Y(:) <= ceil(max(yR(:,NR))) & Y(:) >= floor(min(yR(:,NR))));
for k = 1:length(idx)
    idxR = find(round(xR(:))==X(idx(k)) & round(yR(:))==Y(idx(k)));
    if ~isempty(idxR)
        R(Y(idx(k)),X(idx(k))) = min(mean(IR(idxR)), R(Y(idx(k)),X(idx(k))));
    end
end
R = min(max(R,0),I);
B = I - R;
return

function [I, xgv, ygv, scale, threshold, canvas] = parse_inputs(varargin)
I = [];
xgv = [];
ygv = [];
scale = [];scale_d = 0;
threshold = []; threshold_d = 0;
canvas=[];
narginchk(0,3);
switch nargin
    case 1
        I = varargin{1};
    case 2
        I = varargin{1};
        scale = varargin{2};
    case 3
        I = varargin{1};
        scale = varargin{2};
        threshold = varargin{3};
end
if isempty(I),      [I, xgv, ygv, canvas] = getcanvas;end
if isempty(I),      error('No image data specified.');end
if isempty(scale),  scale = scale_d;end
if isempty(threshold),  threshold = threshold_d;end
if ischar(scale),   scale = str2double(scale);end
scale = round(max(scale,0));
return
